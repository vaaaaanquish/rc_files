# 閉じカッコの補完
[[plugins]]
repo = 'cohama/lexima.vim'
overwrite = true
hook_post_source = '''
  let g:lexima_no_default_rules = 1
  call lexima#set_default_rules()
'''

# 複数行編集
[[plugins]]
repo = 'terryma/vim-multiple-cursors'
overwrite = true
hook_add = '''
  let g:multi_cursor_use_default_mapping=0
  let g:multi_cursor_start_word_key = '<C-n>'
  let g:multi_cursor_next_key = '<C-n>'
'''

# ウィンドウサイズの変更
[[plugins]]
repo = 'simeji/winresizer'
overwrite = true
hook_add = '''
  let g:winresizer_start_key = '<Leader>e'
'''

# Markdownをブラウザでプレビュー(:InstantMarkdownPreview)
[[plugins]]
repo = 'suan/vim-instant-markdown'
overwrite = true
hook_add = '''
  let g:instant_markdown_autostart = 0
  nnoremap <Leader>m :InstantMarkdownPreview<CR>
'''

# power line
[[plugins]]
repo = 'itchyny/lightline.vim'
overwrite = true
hook_add = '''
  " https://sy-base.com/myrobotics/vim/vim-lightline/
  let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
        \ 'left': [ ['mode', 'paste'], ['readonly', 'filepath', 'modified'] ]
            \ },
    \ 'component_function':{
        \ 'filepath': 'FilePath'
            \ }
    \ }
  function! FilePath()
    if winwidth(0) > 90
        return expand("%:s")
    else
        return expand("%:t")
    endif
  endfunction
  set laststatus=2
  set noshowmode
'''


# <C-/><C-/>でコメント
[[plugins]]
repo = 'tomtom/tcomment_vim'
overwrite = true

# vvvで選択範囲拡張
[[plugins]]
repo = 'terryma/vim-expand-region'
overwrite = true
hook_add = '''
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)
'''

# 置換のビジュアライズ
[[plugins]]
repo = 'osyo-manga/vim-over'
overwrite = true
hook_add = '''
  cnoreabb <silent><expr>s getcmdtype()==':' && getcmdline()=~'^s' ? 'OverCommandLine<CR><C-u>%s/<C-r>=get([], getchar(0), '')<CR>' : 's'
  nnoremap <silent> <Leader>s :OverCommandLine<CR>%s//g<Left><Left>
  vnoremap <silent> <Leader>s :OverCommandLine<CR>s//g<Left><Left>
'''


# nerdtree
[[plugins]]
repo = 'scrooloose/nerdtree'
overwrite = true
hook_add = '''
  autocmd StdinReadPre * let s:std_in=1
  " autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  nnoremap <Leader>n :NERDTreeToggle<CR>
  let g:NERDTreeNodeDelimiter = "\u00a0"
  let g:NERDTreeShowHidden=1
  let g:NERDTreeIgnore=['\.DS_Store$', '\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']
  autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()) | q | endif
  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction
  call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
  call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
  call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
'''

# nerdtreeにgit表示
[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
overwrite = true

# Ag検索
[[plugins]]
repo = 'rking/ag.vim'
overwrite = true
hook_add = '''
  nnoremap <Leader>a :Ag 
'''

# Unite yfファイル閲覧
[[plugins]]
repo = 'Shougo/neomru.vim'
overwrite = true

# Unite yyヤンク閲覧
[[plugins]]
repo = 'Shougo/neoyank.vim'
overwrite = true

# Unite
[[plugins]]
repo = 'Shougo/unite.vim'
overwrite = true
hook_add = '''
  let g:unite_enable_start_insert=1
  let g:unite_source_file_mru_limit=200
  nnoremap <Leader>y :<C-u>Unite history/yank<CR>
  nnoremap <Leader>h :<C-u>Unite file_mru<CR>
'''

# markdownのheadを読む
[[plugins]]
repo = 'Shougo/unite-outline'
overwrite = true
hook_add = '''
  nnoremap <Leader>o :<C-u>Unite outline<CR>
'''

# 括弧囲むやつs, ds, cs
[[plugins]]
repo = 'tpope/vim-surround'
overwrite = true
hook_add = '''
nm <Leader>" ysiw"
nm <Leader>' ysiw'
'''

# surroundをドットコマンドで繰り返す
[[plugins]]
repo = 'tpope/vim-repeat'
overwrite = true

# coc
[[plugins]]
repo = 'neoclide/coc.nvim'
overwrite = true
build = './install.sh nightly'
hook_add = '''
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

nnoremap <silent> <Leader>k :call <SID>show_documentation()<CR>
nmap <silent> <Leader>j <Plug>(coc-references)
'''

# シンタックスハイライト
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
overwrite = true
hook_add = '''
lua <<EOF
vim.cmd('packadd! nvim-treesitter')
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained",
  highlight = {enable = true},
}
EOF
'''

# color monokai
[[plugins]]
repo = "tanvirtin/monokai.nvim"
overwrite = true

